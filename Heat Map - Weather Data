<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Heatmaps</title>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map {
            height: 100%;
        }

        #floating-panel {
            position: absolute;
            top: 10px;
            left: 25%;
            z-index: 5;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #999;
            text-align: center;
            font-family: 'Roboto','sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }

        #floating-panel {
            background-color: #fff;
            border: 1px solid #999;
            left: 25%;
            padding: 5px;
            position: absolute;
            top: 10px;
            z-index: 5;
        }
    </style>
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.js"></script>
    
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js"></script>


    <script>
        var map, heatmap, mapsEngineLayer, tileNEX;
        var openWeatherMapKey = '2f73bf9f44e5fcf9ebe1814df5afb0f7';
        var gettingData = false;
        var geoJSON;
        var request;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 16,
            center: { lat: -31.953, lng: 115.852 },
            mapTypeId: google.maps.MapTypeId.SATELLITE
        });

        heatmap = new google.maps.visualization.HeatmapLayer({
            data: getPoints(),
            map: map
        });

        mapsEngineLayer = new google.maps.visualization.MapsEngineLayer({
            layerId: '09372590152434720789-14127290532664981344',
            map: map
        });
        
        google.maps.event.addListener(map, 'idle', checkIfDataRequested);
        
        map.data.addListener('click', function (event) {
            infowindow.setContent(
                "<img src=" + event.feature.getProperty("icon") + ">"
                + "<br /><strong>" + event.feature.getProperty("city") + "</strong>"
                + "<br />" + event.feature.getProperty("temperature") + "&deg;C"
                + "<br />" + event.feature.getProperty("weather")
         );
            infowindow.setOptions({
                position:{
                    lat: event.latLng.lat(),
                    lng: event.latLng.lng()
                },
                pixelOffset: {
                    width: 0,
                    height: -15
                }
            });

            infowindow.open(map);
        });
    }

    function toggleHeatmap() {
        heatmap.setData(getPoints());
        heatmap.setMap(heatmap.getMap() ? null : map);
    }

    // Heatmap data: 500 Points
    function getPoints() {
        var points = [];
        $.each(dummy_data.features, function(k,v) {
            points.push(new google.maps.LatLng(v.geometry.coordinates[1], v.geometry.coordinates[0]));
        });
        return points;
    }
    function resetFilter() {
        var points = [];
        heatmap.setData(getPoints());
    }
    function filterToday() {
        var points = [];
        var date = moment().format('YYYY/MM/DD');

        $.each(dummy_data.features, function (k, v) {
            if (moment(v.properties.timestamp).isSame(date)) {
                points.push(new google.maps.LatLng(v.geometry.coordinates[1], v.geometry.coordinates[0]));
            }
        });
        heatmap.setData(points);
    }

    function filterPastSevenDays() {
        var points = [];
        var date = moment().subtract(7, 'days');
        //date.setDate(new Date().setDate(new Date().getDate() - 7));

        $.each(dummy_data.features, function (k, v) {
            if (moment(v.properties.timestamp).isAfter(date)) {
                points.push(new google.maps.LatLng(v.geometry.coordinates[1], v.geometry.coordinates[0]));
            }
        });

        heatmap.setData(points);
    }

    function filterPastMonth() {
        var points = [];
        var date = moment().subtract(1, 'Months');

        $.each(dummy_data.features, function (k, v) {
            if (moment(v.properties.timestamp).isBefore(date)) {
                points.push(new google.maps.LatLng(v.geometry.coordinates[1], v.geometry.coordinates[0]));
            }
        });

        heatmap.setData(points);
    }

    var checkIfDataRequested = function () {
        // Stop extra requests being sent
        while (gettingData === true) {
            request.abort();
            gettingData = false;
        }
        getCoords();
    };
    // Get the coordinates from the Map bounds
    var getCoords = function () {
        var bounds = map.getBounds();
        var NE = bounds.getNorthEast();
        var SW = bounds.getSouthWest();
        getWeather(NE.lat(), NE.lng(), SW.lat(), SW.lng());
    };
    // Make the weather request
    var getWeather = function (northLat, eastLng, southLat, westLng) {
        gettingData = true;
        var requestString = "http://api.openweathermap.org/data/2.5/box/city?bbox="
                            + westLng + "," + northLat + "," //left top
                            + eastLng + "," + southLat + "," //right bottom
                            + map.getZoom()
                            + "&cluster=yes&format=json"
                            + "&APPID=" + openWeatherMapKey;
        request = new XMLHttpRequest();
        request.onload = proccessResults;
        request.open("get", requestString, true);
        request.send();
    };
    // Take the JSON results and proccess them
    var proccessResults = function () {
        console.log(this);
        var results = JSON.parse(this.responseText);
        if (results.list.length > 0) {
            resetData();
            for (var i = 0; i < results.list.length; i++) {
                geoJSON.features.push(jsonToGeoJson(results.list[i]));
            }
            drawIcons(geoJSON);
        }
    };
    var infowindow = new google.maps.InfoWindow();
    // For each result that comes back, convert the data to geoJSON
    var jsonToGeoJson = function (weatherItem) {
        var feature = {
            type: "Feature",
            properties: {
                city: weatherItem.name,
                weather: weatherItem.weather[0].main,
                temperature: weatherItem.main.temp,
                min: weatherItem.main.temp_min,
                max: weatherItem.main.temp_max,
                humidity: weatherItem.main.humidity,
                pressure: weatherItem.main.pressure,
                windSpeed: weatherItem.wind.speed,
                windDegrees: weatherItem.wind.deg,
                windGust: weatherItem.wind.gust,
                icon: "http://openweathermap.org/img/w/"
                      + weatherItem.weather[0].icon + ".png",
                coordinates: [weatherItem.coord.lon, weatherItem.coord.lat]
            },
            geometry: {
                type: "Point",
                coordinates: [weatherItem.coord.lon, weatherItem.coord.lat]
            }
        };
        // Set the custom marker icon
        map.data.setStyle(function (feature) {
            return {
                icon: {
                    url: feature.getProperty('icon'),
                    anchor: new google.maps.Point(25, 25)
                }
            };
        });
        // returns object
        return feature;
    };
    // Add the markers to the map
    var drawIcons = function (weather) {
        map.data.addGeoJson(geoJSON);
        // Set the flag to finished
        gettingData = false;
    };
    // Clear data layer and geoJSON
    var resetData = function () {
        geoJSON = {
            type: "FeatureCollection",
            features: []
        };
        map.data.forEach(function (feature) {
            map.data.remove(feature);
        });
    };
    google.maps.event.addDomListener(window, 'load', initMap);

    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?signed_in=true&libraries=visualization&callback=initMap">
    </script>
    <script src="MapData.json"></script>
</head>

<body>
    <div id="floating-panel">
        <button onclick="toggleHeatmap()">Toggle Heatmap</button>
        <button onclick="changeGradient()">Toggle Known Obstructions</button>
    </div>
    <nav style="float:left; display:block">
        <button onclick="filterToday()" style="display:list-item; display:block">Today</button>
        <button onclick="filterPastSevenDays()" style="display:list-item; display:block">Last Week</button>
        <button onclick="filterPastMonth()" style="display:list-item; display:block">Last Month</button>
    </nav>
    <nav>
        <button onclick="resetFilter()" style="display:block">Reset</button>
    </nav>    
    <div id="map"></div>
</body>
</html>
<!--Sign up for free to join this conversation on GitHub. Already have an account? Sign in to comment
Status API Training Shop Blog About Pricing
Â© 2015 GitHub, Inc. Terms Privacy Security Contact Help-->
